---
openapi: 3.0.0
info:
  title: Sample Pet Store App
  description: This is a sample server for a pet store.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
    x-email: x-email-value
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
    x-license: x-license-value
  version: 1.0.1
  x-version: x-version-value
externalDocs:
  description: Find more info here
  url: https://swagger.io
  x-externalDocs: x-externalDocs-value
servers:
- url: urn:server1
  description: Server 1 description.
  variables:
    Variable1:
      default: one
      description: Description of variable 1
      enum:
      - one
      - two
      - three
      x-description: x-description-value
    Variable2:
      default: dog
      description: Description of variable 2
      enum:
      - dog
      - cat
      - pig
  x-variables-int: 100
  x-variables-string: string-value
  x-variables-array:
  - 1
  - 2
  - 3
  - 4
  - 5
  x-variables-object:
    prop1: value1
    prop2: value2
- url: urn:server2
  description: Server 2 description.
security:
- api_key: []
- basic_auth: []
- oauth2_auth:
  - write:foo
  - read:foo
tags:
- name: tag-1
  description: Tag 1 description.
  x-description: x-description-value
  x-description-2: foo-bar
- name: tag-2
  description: Tag 2 description.
  externalDocs:
    description: Find more info here
    url: https://example.com
paths:
  /foo:
    $ref: '#/paths/self'
    summary: A summary
    description: Some description here.
    get:
      tags:
      - tag-1
      - tag-2
      summary: Operation summary
      description: Operation description here.
      externalDocs:
        description: Find more info on GET here
        url: https://example.com/#get
      operationId: getAllFoos
      parameters:
      - $ref: '#/components/parameters/Param1'
        name: Param1
        in: query
        description: Param description here.
        required: true
        schema:
          $ref: '#/components/schemas/MySchema'
        allowEmptyValue: true
        deprecated: false
        style: simple
        explode: false
        allowReserved: true
        example: yarr!
        examples:
          Example-1:
            $ref: '#/components/examples/Example-1'
            summary: Summary of Example
            description: Description of example 1!
            value: foo
            externalValue: foo-bar
          Example-2:
            $ref: '#/components/examples/Example-2'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MySchema27'
            example:
              p1: v1
              p2: true
              p3: 17
              p4:
              - a
              - b
              - c
            encoding:
              property1:
                contentType: application/json
                style: pipeDelimited
                explode: false
                allowReserved: false
            x-mediaType-1: x-mediaType-1-value
            x-mediaType-2: x-mediaType-2-value
      requestBody:
        $ref: '#/components/requestBodies/FooRequestBody'
        description: Description of the request body.
        content:
          application/json: {}
          text/plain: {}
          text/xml: {}
        required: true
        x-request-body-1: value1
        x-request-body-2:
        - foo
        - bar
        - baz
      responses:
        default:
          $ref: '#/components/responses/DefaultResponse'
        200:
          $ref: '#/components/responses/OKResponse'
          description: Successful response.
          headers:
            Header-1:
              $ref: '#/components/headers/FooHeader'
              description: Description of the header here.
              required: true
              deprecated: true
              allowEmptyValue: true
              style: simple
              explode: false
              schema:
                $ref: '#/components/schemas/SomeOtherSchema'
              example:
                foo: baz
              examples:
                Header-1-Example-1: {}
                Header-1-Example-2: {}
              content: {}
              x-header-1: x-header-1-value
              x-header-2: 179
            Header-2:
              $ref: '#/components/headers/BarHeader'
          content:
            application/json: {}
            text/plain: {}
          links:
            Link-1:
              $ref: '#/components/links/LinkOne'
              operationRef: OPERATION-REF
              operationId: OP-ID
              parameters: {}
              requestBody: {}
              description: Description of link 1.
              server:
                url: urn:server-1
              x-link-1: x-link-1-value
              x-link-2: true
            Link-2:
              $ref: '#/components/links/LinkTwo'
        404:
          $ref: '#/components/responses/NotFound'
      callbacks:
        Callback-1:
          $ref: '#/components/callbacks/CallbackOne'
          PathItem-1:
            $ref: '#/paths/fooItem'
          x-callback-1: x-callback-1-value
          x-callback-2: 17
      deprecated: true
      security:
      - api_key: []
      - basic_auth: []
      servers:
      - url: urn:server1
      - url: urn:server2
      x-operation-1: true
      x-operation-2:
        hello: world
        foo: 100
        array:
        - 1
        - 2
        - 3
        - 4
        - 5
    put:
      operationId: putAllFoos
    post:
      operationId: postAllFoos
    delete:
      operationId: deleteAllFoos
    options:
      operationId: optionsAllFoos
    head:
      operationId: headAllFoos
    patch:
      operationId: patchAllFoos
    trace:
      operationId: traceAllFoos
  /foo/{fooId}:
    $ref: '#/paths/OtherPathItem'
  x-paths-extension-1: paths extension value
  x-paths-extension-2:
  - array
  - of
  - values
  - true
  - 100
components:
  schemas:
    Schema-1: {}
    Schema-2: {}
  responses:
    Response-1: {}
    Response-2: {}
  parameters:
    Parameter-1: {}
    Parameter-2: {}
  examples:
    Example-1: {}
    Example-2: {}
  requestBodies:
    Request-Body-1: {}
    Request-Body-2: {}
  headers:
    Header-1: {}
    Header-2: {}
  securitySchemes:
    basic_auth:
      $ref: n/a
      type: http
      description: Basic HTTP auth.
      name: Basic Auth
      in: header
      scheme: http
      bearerFormat: bearer-format-value
      flows:
        implicit:
          authorizationUrl: urn:auth-url
          tokenUrl: urn:token-url
          refreshUrl: urn:refresh-url
          scopes:
            read:foo: read access to foos
            write:foo: write access to foos
            admin:foo: admin access
          x-implicit-ext-1: some-value
          x-implicit-ext-2: 1.902471092740913E29
        password: {}
        clientCredentials: {}
        authorizationCode: {}
        x-flows-ext-1: flows-ext-value
        x-flows-ext-2: false
      openIdConnectUrl: urn:open-id-connect/url
      x-scheme-ext-1: -1023873
    oauth:
      type: oauth2
      name: OAuth Auth
      in: query
  links: {}
  callbacks: {}
x-root-extension-1: hello world
x-root-extension-2:
- true
- false
